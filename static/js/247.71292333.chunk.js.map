{"version":3,"file":"static/js/247.71292333.chunk.js","mappings":"yNAqCA,UAjCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAe5B,OAbAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEKC,EAAAA,EAAAA,GAAU,SAADC,OAAUnB,EAAO,aAAY,KAAD,EAAlDc,EAAIC,EAAAK,KAEVb,EAAYO,EAAKA,MAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEvBO,QAAQC,IAAGR,EAAAM,IAAQ,yBAAAN,EAAAS,OAAA,GAAAX,EAAA,kBAEtB,kBARc,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KASfjB,GACF,GAAG,CAACT,KAGF2B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACuB,IAApBvB,EAASwB,OACRxB,EAASyB,KAAI,SAAAC,GAAE,OACbL,EAAAA,EAAAA,KAAA,OAAAE,UACEI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,CACGG,EAAGE,UAAU,KAAGF,EAAGG,SAFdH,EAAGI,GAIP,KAGRT,EAAAA,EAAAA,KAAA,OAAAE,SAAK,eAIb,C,8FCnBAQ,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMnB,EAAS,eAAAR,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAOyB,GAAa,IAAAC,EAAAC,EAAAC,EAAAf,UAAA,OAAAd,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAa,OAAXsB,EAAME,EAAAX,OAAA,QAAAY,IAAAD,EAAA,GAAAA,EAAA,GAAG,GAAE1B,EAAAE,KAAA,EACjCoB,EAAAA,EAAAA,IAAU,GAADlB,OAC3BmB,EAAa,6CAAAnB,OAA4CoB,IAC5D,KAAD,EAFa,OAARC,EAAQzB,EAAAK,KAAAL,EAAA4B,OAAA,SAGPH,EAASI,MAAI,wBAAA7B,EAAAS,OAAA,GAAAX,EAAA,KACrB,gBALqBgC,GAAA,OAAAnC,EAAAe,MAAA,KAAAC,UAAA,I","sources":["components/Cast/Cast.jsx","helpers/API.js"],"sourcesContent":["import { getMovies } from 'helpers/API';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [infoCast, setInfoCast] = useState([]);\n\n  useEffect(() => {\n    const movieCast = async () => {\n      try {\n        const cast = await getMovies(`movie/${movieId}/credits`);\n\n        setInfoCast(cast.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    movieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {infoCast.length !== 0 ? (\n        infoCast.map(el => (\n          <div key={el.id}>\n            <h2>\n              {el.character}: {el.name}\n            </h2>\n          </div>\n        ))\n      ) : (\n        <div>Not found</div>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","// import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// const key = 'ca07cfa0a72b49d166a90c6c0253cddf';\n\n// const params = new URLSearchParams({\n//   api_key: key,\n// });\n\n// export const getMovies = async typeOfRequest => {\n//   const response = await axios.get(`${typeOfRequest}?${params}`);\n//   return response.data.results;\n// };\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getMovies = async (typeOfRequest, params = '') => {\n  const response = await axios.get(\n    `${typeOfRequest}?api_key=ca07cfa0a72b49d166a90c6c0253cddf${params}`\n  );\n  return response.data;\n};\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","infoCast","setInfoCast","useEffect","movieCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","cast","_context","prev","next","getMovies","concat","sent","t0","console","log","stop","apply","arguments","_jsx","_Fragment","children","length","map","el","_jsxs","character","name","id","axios","typeOfRequest","params","response","_args","undefined","abrupt","data","_x"],"sourceRoot":""}
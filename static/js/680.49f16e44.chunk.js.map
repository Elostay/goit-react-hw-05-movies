{"version":3,"file":"static/js/680.49f16e44.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/MoviesList/MoviesList.jsx","helpers/API.js","pages/HomePage/HomePage.jsx","pages/HomePage/HomePage.styled.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  row-gap: 50px;\n`;\nexport const CastItem = styled.li`\n  width: calc((100% - 20px) / 3);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n  gap: 20px;\n  font-weight: 500;\n  @media (max-width: 650px) {\n    width: calc((100% - 10px) / 2);\n  }\n`;\nexport const Img = styled.img`\n  width: 200px;\n  border-radius: 20px;\n`;\nexport const ActorName = styled.h2`\n  display: inline-block;\n  padding: 10px;\n  border-radius: 20px;\n  color: #662549;\n  margin-bottom: 20px;\n  font-size: 20px;\n  background-color: #e8bcb9;\n`;\n","import { Item, Links, List } from 'pages/HomePage/HomePage.styled';\nimport { useLocation } from 'react-router-dom';\nimport oops from '../../img/oops.jpg';\nimport { Img } from 'components/Cast/Cast.styled';\n\nexport const MoviesList = ({ movies, isPosterPath }) => {\n  const location = useLocation();\n  const baseUrl = 'https://image.tmdb.org/t/p/w300';\n\n  return (\n    <>\n      <List className=\"text-xl text-whiteMy\">\n        {movies.map(movie => (\n          <Item key={movie.id}>\n            <Links to={`/movies/${movie.id}`} key={movie.id} state={location}>\n              <>\n                {!isPosterPath && (\n                  <img width=\"100\" height=\"100\" src={oops} alt=\"404\" />\n                )}\n              </>\n              <>\n                {movie.poster_path && (\n                  <Img\n                    width=\"100\"\n                    height=\"100\"\n                    src={`${baseUrl}${movie.poster_path}`}\n                    alt=\"poster\"\n                  />\n                )}\n              </>\n              {movie.title ?? movie.name}\n            </Links>\n          </Item>\n        ))}\n        {movies.length === 0 && <p>Not found</p>}\n      </List>\n    </>\n  );\n};\n\n// {\n// /  !isPosterPath && <img width=\"100\" height=\"100\" src={oops} alt=\"404\" />;\n// }\n\n// {\n//   info.poster_path && (\n//     <Img\n//       width=\"100\"\n//       height=\"100\"\n//       src={`${baseUrl}${info.poster_path}`}\n//       alt=\"poster\"\n//     />\n//   );\n// }\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'ca07cfa0a72b49d166a90c6c0253cddf',\n};\n\nexport const getMovies = async (endpoint, queryParams = {}) => {\n  const response = await axios.get(endpoint, { params: queryParams });\n  return response.data;\n};\n\nexport const fetchTrendingAPI = async () => {\n  const endpoint = 'trending/movie/day';\n  return await getMovies(endpoint);\n};\n\nexport const fetchMoviesByNameAPI = async query => {\n  const endpoint = `search/movie`;\n  return await getMovies(endpoint, { query });\n};\n\nexport const fetchMovieInfoAPI = async movieId => {\n  const endpoint = `movie/${movieId}`;\n  return await getMovies(endpoint);\n};\n\nexport const fetchMovieCastAPI = async movieId => {\n  const endpoint = `movie/${movieId}/credits`;\n  return await getMovies(endpoint);\n};\n\nexport const fetchMovieReviewsAPI = async movieId => {\n  const endpoint = `movie/${movieId}/reviews`;\n  return await getMovies(endpoint);\n};\n","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { fetchTrendingAPI } from 'helpers/API';\nimport { useEffect, useState } from 'react';\nimport { Title } from './HomePage.styled';\n\nconst Home = () => {\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [isPosterPath, setIsPosterPath] = useState(true);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const popularMoviesRequest = await fetchTrendingAPI();\n\n        setPopularMovies(popularMoviesRequest.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        popularMovies.poster_path === null\n          ? setIsPosterPath(false)\n          : setIsPosterPath(true);\n      }\n    };\n    fetchMovies();\n  }, [popularMovies.poster_path]);\n  return (\n    <>\n      <Title>Popular movies</Title>\n      {<MoviesList movies={popularMovies} isPosterPath={isPosterPath} />}\n    </>\n  );\n};\nexport default Home;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const List = styled.ul`\n  margin-top: 40px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\nexport const Title = styled.p`\n  font-size: 40px;\n  color: wheat;\n`;\nexport const Item = styled.li`\n  width: calc((100% - 40px) / 5);\n\n  text-align: center;\n`;\nexport const Links = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastItem","_templateObject2","Img","_templateObject3","ActorName","_templateObject4","MoviesList","_ref","movies","isPosterPath","location","useLocation","_jsx","_Fragment","children","_jsxs","List","className","map","movie","_movie$title","Item","Links","to","concat","id","state","width","height","src","oops","alt","poster_path","title","name","length","axios","api_key","getMovies","_asyncToGenerator","_regeneratorRuntime","_callee","endpoint","queryParams","response","_args","arguments","_context","prev","next","undefined","params","sent","abrupt","data","stop","_x","apply","fetchTrendingAPI","_ref2","_callee2","_context2","fetchMoviesByNameAPI","_ref3","_callee3","query","_context3","_x2","fetchMovieInfoAPI","_ref4","_callee4","movieId","_context4","_x3","fetchMovieCastAPI","_ref5","_callee5","_context5","_x4","fetchMovieReviewsAPI","_ref6","_callee6","_context6","_x5","_useState","useState","_useState2","_slicedToArray","popularMovies","setPopularMovies","_useState3","_useState4","setIsPosterPath","useEffect","fetchMovies","popularMoviesRequest","results","t0","console","log","finish","Title","Link"],"sourceRoot":""}